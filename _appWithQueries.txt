import React, { useState, useEffect } from 'react';
import { ApolloProvider, ApolloClient, InMemoryCache, useQuery } from '@apollo/client';
import { useRouter } from 'next/router';

import { QUERY_CHARACTERS, GET_ITEMS_DATA, GET_SUPPORT_MEMORY_DATA } from "./pages/api/queries"

import Auth from './components/util/auth'

import '../styles/index.css'

export const UserContext = React.createContext(null);

const client = new ApolloClient({
  uri: process.env.NEXT_PUBLIC_API_KEY,
  cache: new InMemoryCache(),
});

function withData(Component) {
  return function WrappedComponent(props) {
    const { loading: allCharactersLoading, data: allCharactersData } = useQuery(QUERY_CHARACTERS);
    const allCharacters = allCharactersData?.characters || [];

    const characterDictionary = Object.fromEntries(
      allCharacters.map((characterObj) => [characterObj.id, characterObj])
    );

    const { loading: allItemsLoading, data: allItemsData } = useQuery(GET_ITEMS_DATA);
    const allItems = allItemsData?.items || []
    
    const { loading: allSupportMemoryoading, data: allSupperMemoryData } = useQuery(GET_SUPPORT_MEMORY_DATA);
    const allSupportMemories = allSupperMemoryData?.supportMemory || []

    useEffect(() => {
      // Code that should run only on page load
      // For example, you can log a message to confirm it runs only once
      console.log("Page loaded");

      // Optionally, you can return a cleanup function if needed
      return () => {
        // Cleanup code here (if any)
      };
    }, []);

    return (
      <Component
        allCharacters={allCharacters}
        allCharactersLoading={allCharactersLoading}
        characterDictionary={characterDictionary}
        allItems={allItems}
        allSupportMemories={allSupportMemories}
        {...props}
      />
    );
  };
}

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const profileData = Auth.getProfile() || [];

  const [showMiddleDiv, setShowMiddleDiv] = useState(true);
  const [showCardDetails, setShowCardDetails] = useState(true);
  const [hoverCharacterStats, setHoverCharacterStats] = useState(null);
  const [turnOnEZAStats, setTurnOnEZAStats] = useState(false);
  const [showCalculator, setShowCalculator] = useState(false);
  const [showDEFCalculator, setShowDEFCalculator] = useState(false);
  const [showSummationLinks, setShowSummationLinks] = useState(true);
  const [grayCharactersInSelectedDeck, setGrayCharactersInSelectedDeck] = useState(false);
  const [allCharacterIDsInDeck, setAllCharacterIDsInDeck] = useState([]);
  const [allNodePositions, setAllNodePositions] = useState([]);
  const [levelOfLinks, setLevelOfLinks] = useState(1);
  const [showSuggestedCardsByStats, setShowSuggestedCardsByStats] = useState(true);

  const ComponentWithData = withData(Component);

  return (
    <ApolloProvider client={client}>
      <UserContext.Provider value={{ 
          profileData,
          showMiddleDiv,
          setShowMiddleDiv,
          showCardDetails,
          setShowCardDetails,
          hoverCharacterStats,
          setHoverCharacterStats,
          turnOnEZAStats,
          setTurnOnEZAStats,
          showCalculator,
          setShowCalculator,
          showDEFCalculator,
          setShowDEFCalculator,
          showSummationLinks,
          setShowSummationLinks,
          grayCharactersInSelectedDeck,
          setGrayCharactersInSelectedDeck,
          allCharacterIDsInDeck,
          setAllCharacterIDsInDeck,
          allNodePositions,
          setAllNodePositions,
          levelOfLinks,
          setLevelOfLinks,
          showSuggestedCardsByStats,
          setShowSuggestedCardsByStats,
       }}>
        <ComponentWithData {...pageProps} />
      </UserContext.Provider>
    </ApolloProvider>
  );
}

export default MyApp;
